# -*- coding: utf-8 -*-
"""Potato Disease using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qQqVEyHtSWaigTQFMZc9v1ForpohzaSq
"""

import tensorflow
from tensorflow import keras

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d rizwan123456789/potato-disease-leaf-datasetpld

import zipfile
zip_ref = zipfile.ZipFile('/content/potato-disease-leaf-datasetpld.zip')
zip_ref.extractall('/content')
zip_ref.close()

train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/PLD_3_Classes_256/Training',
    labels = 'inferred',
    label_mode = 'int',
    image_size= (150, 150),
    batch_size = 32
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/PLD_3_Classes_256/Validation',
    labels = 'inferred',
    label_mode = 'int',
    image_size= (150, 150),
    batch_size = 32
)

test_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/PLD_3_Classes_256/Testing',
    labels = 'inferred',
    label_mode = 'int',
    image_size= (150, 150),
    batch_size = 32
)

class_names = train_ds.class_names

class_names

def process(image, label):
  image = tensorflow.cast(image/255, tensorflow.float32)
  return image, label

training_data = train_ds.map(process)
validation = validation_ds.map(process)
testing_data = test_ds.map(process)

from keras import Sequential
from keras.layers import *

model = Sequential()

model.add(Conv2D(64, kernel_size = (3,3), padding = 'valid', activation = 'relu', input_shape = (150, 150,3)))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Conv2D(64, kernel_size = (3,3), padding = 'valid', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Conv2D(64, kernel_size = (3,3), padding = 'valid', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))
model.add(Conv2D(64, kernel_size = (3,3), padding = 'valid', activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2), strides = 2, padding = 'valid'))

model.add(Flatten())
model.add(Dense(64, activation = 'relu'))

model.add(Dense(3, activation = 'softmax'))

model.summary()

model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

from keras.callbacks import EarlyStopping

callbacks = EarlyStopping(monitor = 'val_loss', patience = 3, verbose = 1, mode = 'auto')

model.fit(training_data, epochs = 100, batch_size=32, verbose = 1, validation_data= (validation), callbacks =[callbacks])

model.evaluate(testing_data)

from keras.preprocessing import image
import numpy as np

# url = '/content/PLD_3_Classes_256/Validation/Late_Blight/Late_Blight_127.jpg'
# img = image.load_img(url, target_size=(150,150))
# img = image.img_to_array(img)

# img = np.expand_dims(img, axis = 0)

# img = img/255

# y_prob = model.predict(img)

# class_names[np.argmax(y_prob, axis = 1)[0]]

def prediction(path, model, class_names):
  img = image.load_img(path, target_size=(150,150))
  img = image.img_to_array(img)
  img = np.expand_dims(img, axis = 0)
  img = img/255

  y_prob = model.predict(img)
  class_name = class_names[np.argmax(y_prob, axis =1)[0]]

  return class_name

path = '/content/PLD_3_Classes_256/Validation/Healthy/Healthy_97.jpg'
prediction(path, model, class_names)

